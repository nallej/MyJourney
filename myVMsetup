#!/bin/bash

#------------------------------------------------------------------#
#  myVMsetup.sh                                                    #
#  Part of the MyJourney project @ homelab.casaursus.net           #
#                                                                  #
#  V.1 Created by Nalle @ 5.1.2023                                 #
#    -review                                                       #
#                                                                  #
#------------------------------------------------------------------#

hyrraPyorii() # Function hyrraPyorii - Shows the activity spinner
  {
     pid=$!   # PID of the previous running command
     x='-\|/' # hyrra in its elements
     i=0
     while kill -0 $pid 2>/dev/null
     do
       i=$(( (i+1) %4 ))
       printf "\r  ${x:$i:1}"
       sleep .1
      done
      printf "\r  "
  }
#------------------------------------------------------------------#

end_msg() # Function - end_msg in log-files
  {
    if [ $? -ne 0 ]
    then
      echo ""
      echo "<<<< Ended with errors @ $(date +"%F %T") ****   ****" >>$ei_log
      echo "ERROR! ERROR! ERROR!"
      echo "Error occurred while upgrading - check the log: $ei_log"
      echo ""
    else
      echo ""
      echo "<<<< Upgrade ended OK  @ $(date +"%F %T") ****   ****" >>$ok_log
      echo "<<<< No errors found   @ $(date +"%F %T") ****   ****" >>$ei_log
      echo "Update completed - please read the log: $ok_log"
    fi
  }
#------------------------------------------------------------------#

start_log () # Function - initialize the log-files
 {
    echo ">>>> Update started    @ $(date +"%F %T") ****  ****" >$ok_log
    echo ">>>> Update started    @ $(date +"%F %T") ****  ****" >$ei_log
 }
#------------------------------------------------------------------#

# Function initUpdater
initUpdater() # Function initUpdater - initialize variables and log-files
  {
    os_rel=/etc/os-release
    pvm=`date "+%Y-%m-%d"`
    ok_log=/var/log/updater/"$pvm"_update_ok.log
    ei_log=/var/log/updater/"$pvm"_update_error.log
    if [ ! -d "/var/log/updater/" ]
      then
        sudo mkdir /var/log/updater
        sudo chown $me:users /var/log/updater
        sudo chmod g+w /var/log/updater
    fi
    if [ ! -f $ok_log ]
      then
        sudo touch $ok_log
        sudo chown $me:users $ok_log
    fi
    if [ ! -f $ei_log ]
      then
        sudo touch $ei_log
        sudo chown $me:users $ei_log
    fi
    #------------------------------------------------------------------#
  }

startUpdater() # Function startUpdater
  {
    if grep -q "debian" $os_rel # Debian/Ubuntu/PopOS based
      then
        echo -e "\b You are running a Debian based OS - Debian, Ubuntu, PopOS ..."
        sudo apt-get update 1>>$ok_log 2>>$ei_log
        sudo echo "---- Upgrade started   @ $(date +"%F %T") ****  ****" >>$ok_log
        sudo echo "---- Upgrade started   @ $(date +"%F %T") ****  ****" >>$ei_log
        sudo apt-get dist-upgrade -y 1>>$ok_log 2>>$ei_log
    elif grep -q "CentOs" $os_rel || grep -q "Fedora" $os_rel || grep -q "redhat" # Redhat/Fedora/CentOS
      then
        echo -e "\b You are running a Fedora or Redhat 8 based OS"
        sudo dnf upgrade -y 1>>$ok_log 2>>$ei_log
    else
      echo ""
      echo "WARNING - Wrong OS for myVMsetop!"
      echo ""
      exit
    fi

  }


startInstall() # Function - Installes the apps
  {
    if grep -q "debian" $os_rel
      then
        myOS=1
        askAPS
        installAPT
    elif grep -q "CentOs" $os_rel || grep -q "Fedora" $os_rel || grep -q "redhat"
      then
        myOS=2
        askAPS
        installDNF
    else
      echo ""
      echo "WARNING - Wrong OS for myVMsetop!"
      echo ""
      exit
    fi
  }

installBaseApps() # Function installs basic apps and features
  {
    echo ""
    echo "Starting upgrade/install of apps for the Docker-stack"
    echo ""
    echo "  WARNING - DON'T run scripts without editing - WARNING"
    echo ""
    echo "  Warning . This script will pull parts from my GitHub"
    echo ""
    lsb_release -a #print lsb-release info
    # running install -------------------------------------------------------------
    echo ""
    echo "  - starting Install"
    echo "  WARNING Read the code - edit and the run!"
    read -rp "  - Do you want to do the Install  [y/n] " DPI
      if [[ "$DPI" = [yY] ]]; then
         echo "  - Running VM updates and installs ..."
         echo "  - The logfile is opend in your home directory - install.log"
         # This is the main part update-install-upgrade ------------------------------
         echo "**** Initial install/upgrade stage ****   ****   ****" > ~/install.log
        # Add bash_aliases ------------------------------------------------------------
        wget https://raw.githubusercontent.com/nallej/MyJourney/main/.bash_aliases &> /dev/null
        . ~/.bash_aliases
        echo "  - added .bash_aliases"
        sudo timedatectl set-timezone "$myTZ"
        echo ""
        echo "  - Setting up unattenden updates = yes "
        echo "**** Docker Pre Install stage ****   ****   ****" >> ~/install.log
        (sudo systemctl enable unattended-upgrades --now) >> ~/install.log 2>&1 &
        echo ""
        echo "  WARNING - Do you want to clear old updates?"
        read -rp "  - Clear old updates  [y/n] " COU
        if [[ "$COU" = [yY] ]]; then
          echo "  - Deliting old installs ..."
          (sudo apt-get clean &&
          sudo apt-get autoremove) >> ~/install.log 2>&1 &
        fi
        mkdir docker
        cd docker
      else
        exit
    fi
    startInstall
  }

askAPPS() #Function - What to install
  {
    actDOCE=$( (sudo systemctl is-active docker ) 2>&1 )
    actDOCO=$( (docker-compose -v ) 2>&1 )
    echo "NOTE: Without Docker you cannot use Docker-Compose, NGinx Proxy Manager, or Portainer-CE."
    echo "      You also must have Docker-Compose for NGinX Proxy Manager to be installed."
    echo "NOTE: - Portainer-ce    - Web GUI for Docker, Swarm and Kubernetes"
    echo "      - Portainer Agent - Remote Agent for other Portainer-ce to Connect to"
    echo ""
    if [[ "$actDOCE" = "active" ]]
        then
          echo "Note -> Docker appears to be installed and running."
          echo ""
    fi
    if [[ "$actDOCO" == *"command not found"* ]]
        then
          echo "Note -> Docker-compose appears to be installed."
          echo ""
    fi
    echo "Chose apps to install:"
    read -rp " Docker-ce                [y/n] " DOCE
    read -rp " Docker-Compose           [y/n] " DOCO
    echo "Use Portainer or the Agent "
    read -rp "  - Portainer-ce          [y/n] " POT
    read -rp "  - Portainer Agent       [y/n] " POTA
    echo ""
    echo "Recommended apps:"
    read -rp " WatchTower, updater      [y/n] " WT
    read -rp " Dozzle, reading logs     [y/n] " DOZ
    echo ""
    echo "Optional apps "
    read -rp "  -  NGinX Proxy Manager [y/n] " NPM
    read -rp "  -  Heimdall            [y/n] " HEIM
    installBaseApps
  }

installAPT() # Function for installing on Debian or Ubuntu
  {
    # Start installing Docker-ce
    if [[ "$DOCE" == [yY] ]]; then
        #sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
        #apt-cache policy docker-ce
        #sudo ls &> /dev/null # dummy to get sudo psw
        echo ""
        echo "installing Docker-ce"
        sudo curl -fsSL https://get.docker.com | sh >> ~/install.log 2>&1 &
        #(sudo apt install -q docker-ce -y ) >> ~/install.log 2>&1 &
        hyrraPyorii
        echo ""
        echo "  - Docker-ce installed. "
        echo "  - Starting docker."
        echo ""
        sleep 10s
        sudo systemctl enable docker
        sudo systemctl enable containerd.service
        sudo systemctl start docker
        sleep 5s
        docker -v
        sleep 2s
        sudo usermod -aG docker "${USER}" # you do not need to sudo to run docker commands after re-login
        sleep 1s
        sudo docker network create -d bridge kadulla  &> /dev/null #frontend
        sudo docker network create -d bridge pihalla  &> /dev/null #backbone
        echo "  $USER added to docker group"
        echo ""
        echo "  Internal networks created:"
        echo "    - kadulla = frontend "
        echo "    - pihalla = backbone "
        echo ""
    fi
    # Start installing Docker-Compose --------------------------------------------
    if [[ "$DOCO" == [yY] ]]; then
        (sudo apt install -q docker-compose -y) >> ~/install.log 2>&1 &
        hyrraPyorii
        echo ""
        echo "  - Docker-Compose installed."
        echo ""
        verDOCO=$(docker-compose --version)
        echo "  - Docker Compose Version is now: $verDOCO"
        echo ""
        sleep 3s
    fi
    echo ""
    # Start installing Portainer/Portainer agent ----------------------------------
    echo ""
    #---------------------------------------------#
    # I use 9000 http, you can use 9443 for https #
    #---------------------------------------------#
    if [[ "$POT" == [yY] ]]; then
        (sudo docker volume create portainer_data
        sudo docker run -d \
         -p 8000:8000 \
         -p 9000:9000 \
         --name=portainer \
         --restart=always \
         -v /var/run/docker.sock:/var/run/docker.sock \
         -v portainer_data:/data \
         portainer/portainer-ce) >> ~/install.log 2>&1 &
        hyrraPyorii
        echo "    - Portainer @ x.x.x.x:9000"
        echo ""

    fi
        if [[ "$POTA" == [yY] ]]; then
            echo ""
            echo ""
            (sudo docker volume create portainer_data
            sudo docker run -d \
             -p 9001:9001 \
             --name portainer_agent \
             --restart=always \
             -v /var/run/docker.sock:/var/run/docker.sock \
             -v /var/lib/docker/volumes:/var/lib/docker/volumes \
             portainer/agent) >> ~/install.log 2>&1 &
            hyrraPyorii
            sleep 2s
            echo ""
            echo "    - Portainer finds this agent @ x.x.x.x:9001"
            echo ""
        fi
      sleep 2s
      echo ""
      # Start installing WatchTower, auto update ------------------------------------
      if [[ "$WT" == [yY] ]]; then
          mkdir ~/docker-stack/watchtower
          cd ~/docker-stack/watchtower
          wget https://raw.githubusercontent.com/nallej/MyJourney/main/watchtower/docker-compose.yml &> /dev/null
      #    docker-compose up -d # uncomment if you want to start now
          echo ""
          echo "Watchtower installed"
          echo "  - Updating images daily 04.00 "
          echo "  - NOT started, edit befor starting"
          echo ""
          cd
      fi

      echo ""
      # Start installing Dozzle, log reader -----------------------------------------
      if [[ "$DOZ" == [yY] ]]; then
          mkdir ~/docker-stack/dozzle
          cd ~/docker-stack/dozzle
          wget https://raw.githubusercontent.com/nallej/MyJourney/main/dozzle/docker-compose.yml &> /dev/null
          # sudo docker-compose up -d # uncomment if you want to start now
          echo ""
          echo "Dozzle installed"
          echo "  - Not started, EDIT befor using"
          echo "  - ports: 9999"
          echo ""
          cd
      fi
      echo ""
      # Start installing Heimdall, internal portal ----------------------------------
      if [[ "$HEIM" == [yY] ]]; then
          mkdir ~/docker-stack/heimdall
          cd ~/docker-stack/heimdall
          wget https://raw.githubusercontent.com/nallej/MyJourney/main/heimdall/docker-compose.yml &>/dev/null
          # docker-compose up -d # uncomment if you want to start now
          echo ""
          echo "Heimdal installed"
          echo "  - Not started, EDIT befor using"
          echo "  - default user/group: 1000/1000"
          echo "  - ports: 9080 or 9088 "
          echo ""
          cd
      fi
      # NGinX Proxy Manager
      if [[ "$NPM" == [yY] ]]; then
         mkdir -p ~/docker/npm
         cd ~/docker/npm
         curl https://gitlab.com/bmcgonag/docker_installs/-/raw/main/docker_compose.nginx_proxy_manager.yml -o docker-compose.yml >> ~/install.log 2>&1 &
         hyrraPyorii
         # docker-compose up -d # uncomment if you want to start now
         echo ""
         echo " NGinX Proxy Manager is installed"
         echo "  - Start and go to your server on port 81 to setupNPM admin account."
         echo "  - default login credentials for NPM are:"
         echo "      username: admin@example.com"
         echo "      password: changeme"
         echo ""
         sleep 3s
         cd
      fi
      echo ""
      echo "Basic installation done!"
      echo "  - add services: prometheus, node-reporter, backup ..."
      echo "  - add your apps wp, ghost ...."
      echo "  - logout and login again to activate permissions"
      echo "  - reboot befor starting apps"
      echo ""
      echo "Rememper to have fun! Learn new things and love the CLI."
    echo ""
  }

installDNF() #Function for installing on Redhat
  {
	echo "Not yet ..."
  }



askTZ() #Function - get the TimeZone variable
  {
    echo ""
    echo "What TimeZone (TZ) do you use"
    read -rp "  Your area (Europe):   " YA
    read -rp "  Your City (Helsinki): " YC
    myTZ=$YA/$YC
    echo "  Your TZ will be $myTZ"
    echo ""
  }

# Main =======================================================
clear
me="${SUDO_USER:-${USER}}"
echo ""
echo "You, $me are running:"
grep -E '^(VERSION|NAME)=' /etc/os-release
echo ""
echo ""
read -rp "Do you want to upgrade this VM [y/N]: " UPG
echo ""
if [[ "$UPG" = [yY] ]]
  then
    initUpdater
    start_log
    startUpdater & hyrraPyorii
    end_msg
    # Post upgrade messsge
    echo ""
    echo ""
    read -rp "  Do you want to see the error-log [y/N]: " SEL
      if [[ "$SEL" = [yY] ]]; then
         cat $ei_log
      fi
    echo ""
    read -rp "  Do you like to see the ok-log [y/N]: " SOK
      if [[ "$SOK" = [yY] ]]; then
         cat $ok_log
      fi
  else
    exit
fi
# Starting installation
askTZ
PS3="TZ = $myTZ - is this correct? [ 1=No / 2=Yes ] "
select _ in \
  " No  - incorrect location" \
  " Yes - this is my place" \
  " Exit"
do
  case $REPLY in
    1) askTZ ;;
    2) askAPPS ;;
    3) exit ;;
    *) echo "  Invalid selection, please try again " ;;
  esac
done
